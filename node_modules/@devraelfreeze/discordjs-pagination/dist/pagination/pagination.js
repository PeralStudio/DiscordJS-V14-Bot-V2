"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pagination = void 0;
const discord_js_1 = require("discord.js");
const pagination_i_1 = require("./pagination.i");
const defaultEmojis = {
    first: "⬅️",
    previous: "◀️",
    next: "▶️",
    last: "➡️",
    number: "#️⃣"
};
const defaultStyles = {
    first: pagination_i_1.StylesButton.Primary,
    previous: pagination_i_1.StylesButton.Primary,
    next: pagination_i_1.StylesButton.Primary,
    last: pagination_i_1.StylesButton.Primary,
    number: pagination_i_1.StylesButton.Success
};
const pagination = async (options) => {
    const { interaction, message, ephemeral, author, disableButtons, embeds, buttons, time, max, customFilter, fastSkip, pageTravel } = options;
    let currentPage = 1;
    const disableB = disableButtons || false;
    const ephemeralMessage = ephemeral !== null ? ephemeral : false;
    if (!interaction && !message)
        throw new Error("Pagination requires either an interaction or a message object");
    const type = interaction ? 'interaction' : 'message';
    const getButtonData = (value) => {
        return buttons?.find((btn) => btn.value === value);
    };
    const resolveButtonName = (value) => {
        return Object.keys(pagination_i_1.TypesButtons).find((key) => {
            return pagination_i_1.TypesButtons[key] === value;
        });
    };
    const generateButtons = (state) => {
        const checkState = (value) => {
            if (([1, 2]).includes(value) && currentPage === 1)
                return true;
            if (([5]).includes(value) && currentPage === 1 && embeds.length === 1)
                return true;
            return ([3, 4]).includes(value) && currentPage === embeds.length;
        };
        let names = [2, 3];
        if (fastSkip)
            names = [1, ...names, 4];
        if (pageTravel)
            names.push(5);
        return names.reduce((accumulator, value) => {
            let embed = new discord_js_1.ButtonBuilder()
                .setCustomId(value.toString())
                .setDisabled(state || checkState(value))
                .setStyle(getButtonData(value)?.style || defaultStyles[resolveButtonName(value)]);
            if (getButtonData(value)?.emoji !== null)
                embed.setEmoji(getButtonData(value)?.emoji || defaultEmojis[resolveButtonName(value)]);
            if (getButtonData(value)?.label)
                embed.setLabel(getButtonData(value)?.label);
            accumulator.push(embed);
            return accumulator;
        }, []);
    };
    const components = (state) => [
        new discord_js_1.ActionRowBuilder().addComponents(generateButtons(state))
    ];
    const changeFooter = () => {
        const embed = embeds[currentPage - 1];
        const embedJSON = embed.toJSON();
        const newEmbed = new discord_js_1.EmbedBuilder(embedJSON);
        if (Object.prototype.hasOwnProperty.call(embedJSON, 'footer')) {
            return newEmbed.setFooter({
                text: `Página ${currentPage} / ${embeds.length} - ${embedJSON.footer.text}`,
                iconURL: embedJSON.footer.icon_url
            });
        }
        return newEmbed.setFooter({
            text: `Página ${currentPage} / ${embeds.length}`
        });
    };
    let initialMessage;
    let channel = message?.channel || interaction?.channel;
    if (type === 'interaction' && channel) {
        if (interaction.type === discord_js_1.InteractionType.ApplicationCommand) {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.deferReply({ ephemeral: ephemeralMessage });
            }
            initialMessage = await interaction.editReply({
                embeds: [changeFooter()],
                components: components()
            });
        }
    }
    else {
        initialMessage = await channel.send({
            embeds: [changeFooter()],
            components: components()
        });
    }
    const defaultFilter = (interaction) => {
        return interaction.user.id === author.id && parseInt(interaction.customId) <= 4;
    };
    const collectorOptions = (filter) => {
        const opt = {
            filter: filter || customFilter || defaultFilter,
            componentType: discord_js_1.ComponentType.Button
        };
        if (max)
            opt["max"] = max;
        if (time)
            opt["time"] = time;
        return opt;
    };
    const collector = initialMessage.createMessageComponentCollector(collectorOptions());
    let collectorModal;
    if (pageTravel) {
        collectorModal = initialMessage.createMessageComponentCollector(collectorOptions((_i) => _i.user.id === author.id && parseInt(_i.customId) === 5));
        collectorModal.on("collect", async (ButtonInteraction) => {
            // Show modal
            const modal = new discord_js_1.ModalBuilder()
                .setCustomId('choose_page_modal')
                .setTitle('Choose Page');
            const inputPageNumber = new discord_js_1.TextInputBuilder()
                .setCustomId('page_number')
                .setLabel('Enter Page Number')
                .setStyle(discord_js_1.TextInputStyle.Short);
            const buildModal = new discord_js_1.ActionRowBuilder().addComponents(inputPageNumber);
            modal.addComponents(buildModal);
            await ButtonInteraction.showModal(modal);
            await ButtonInteraction.awaitModalSubmit({
                filter: (_i) => _i.user.id === author.id && _i.customId === 'choose_page_modal',
                time: 30000,
            }).then(async (i) => {
                const page_number = i.fields.getTextInputValue('page_number');
                const int = parseInt(page_number);
                if (isNaN(int))
                    return i.followUp({
                        content: `${i.member.user}, Please enter a valid page number!\n\`${page_number}\` is not a valid page number!`,
                        ephemeral: true
                    });
                int > embeds.length ? currentPage = embeds.length : int < embeds.length ? currentPage = 1 : currentPage = int;
                await i.update({
                    embeds: [changeFooter()],
                    components: components(),
                    ephemeral: ephemeralMessage
                });
            });
        });
    }
    collector.on("collect", async (interaction) => {
        const value = parseInt(interaction.customId);
        switch (value) {
            case 1:
                currentPage = 1;
                break;
            case 2:
                currentPage--;
                break;
            case 3:
                currentPage++;
                break;
            case 4:
                currentPage = embeds.length;
                break;
        }
        await interaction.update({
            embeds: [changeFooter()],
            components: components()
        });
    });
    collector.on("end", () => {
        if (type === 'message') {
            initialMessage.edit({
                components: disableB ? components(true) : []
            });
        }
        else {
            interaction.editReply({
                components: disableB ? components(true) : []
            });
        }
    });
};
exports.pagination = pagination;
//# sourceMappingURL=pagination.js.map