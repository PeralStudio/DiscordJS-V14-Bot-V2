import { Network, type EmptyResult } from '../../../protocol/protocol.js';
import type { BrowsingContextStorage } from '../context/BrowsingContextStorage.js';
import { NetworkStorage } from './NetworkStorage.js';
/** Dispatches Network domain commands. */
export declare class NetworkProcessor {
    #private;
    constructor(browsingContextStorage: BrowsingContextStorage, networkStorage: NetworkStorage);
    addIntercept(params: Network.AddInterceptParameters): Promise<Network.AddInterceptResult>;
    continueRequest(params: Network.ContinueRequestParameters): Promise<EmptyResult>;
    continueResponse(_params: Network.ContinueResponseParameters): EmptyResult;
    continueWithAuth(_params: Network.ContinueWithAuthParameters): EmptyResult;
    failRequest(params: Network.FailRequestParameters): Promise<EmptyResult>;
    provideResponse(_params: Network.ProvideResponseParameters): EmptyResult;
    removeIntercept(params: Network.RemoveInterceptParameters): Promise<EmptyResult>;
    /**
     * Attempts to parse the given url.
     * Throws an InvalidArgumentException if the url is invalid.
     */
    static parseUrlString(url: string): URL;
    static parseUrlPatterns(urlPatterns: Network.UrlPattern[]): Network.UrlPattern[];
}
