{"version":3,"sources":["../src/biquad/Coefficients.ts","../src/biquad/Biquad.ts","../src/utils/Frequency.ts","../src/utils/PCMTransformer.ts","../src/biquad/BiquadStream.ts","../src/equalizer/ChannelProcessor.ts","../src/equalizer/Coefficients.ts","../src/equalizer/EqualizerConfiguration.ts","../src/equalizer/Equalizer.ts","../src/equalizer/EqualizerStream.ts","../src/audio/MonoStereoTransformer.ts","../src/audio/AudioFilter.ts","../src/index.ts"],"sourcesContent":["export const FilterType = {\n    SinglePoleLowPassApprox: 0,\n    SinglePoleLowPass: 1,\n    LowPass: 2,\n    HighPass: 3,\n    BandPass: 4,\n    Notch: 5,\n    AllPass: 6,\n    LowShelf: 7,\n    HighShelf: 8,\n    PeakingEQ: 9\n} as const;\n\nexport type BiquadFilters = keyof typeof FilterType | (typeof FilterType)[keyof typeof FilterType];\n\ninterface CoefficientsInit {\n    a1: number;\n    a2: number;\n    b0: number;\n    b1: number;\n    b2: number;\n}\n\nexport const Q_BUTTERWORTH = Math.SQRT1_2;\n\nexport class Coefficients {\n    // Denominator coefficients\n    public a1 = 0;\n    public a2 = 0;\n\n    // Nominator coefficients\n    public b0 = 0;\n    public b1 = 0;\n    public b2 = 0;\n\n    public constructor(data?: CoefficientsInit) {\n        if (data) {\n            this.a1 = data.a1;\n            this.a2 = data.a2;\n            this.b0 = data.b0;\n            this.b1 = data.b1;\n            this.b2 = data.b2;\n        }\n    }\n\n    public static from(filter: BiquadFilters, samplingFreq: number, cutoffFreq: number, Q: number, dbGain = 0) {\n        if (2.0 * cutoffFreq > samplingFreq) {\n            throw new Error(`Cutoff frequency is too big!`);\n        }\n\n        if (Q < 0) {\n            throw new Error(`Q may not be negative`);\n        }\n\n        const omega = (2.0 * Math.PI * cutoffFreq) / samplingFreq;\n\n        if (typeof filter === 'string') filter = FilterType[filter];\n\n        switch (filter) {\n            case FilterType.SinglePoleLowPassApprox: {\n                const alpha = omega / (omega + 1.0);\n\n                return new Coefficients({\n                    a1: alpha - 1.0,\n                    a2: 0.0,\n                    b0: alpha,\n                    b1: 0.0,\n                    b2: 0.0\n                });\n            }\n            case FilterType.SinglePoleLowPass: {\n                const omega_t = Math.tan(omega / 2.0);\n                const a0 = 1.0 + omega_t;\n\n                return new Coefficients({\n                    a1: (omega_t - 1.0) / a0,\n                    a2: 0.0,\n                    b0: omega_t / a0,\n                    b1: omega_t / a0,\n                    b2: 0.0\n                });\n            }\n            case FilterType.LowPass: {\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = (1.0 - omega_c) * 0.5;\n                const b1 = 1.0 - omega_c;\n                const b2 = (1.0 - omega_c) * 0.5;\n                const a0 = 1.0 + alpha;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha;\n\n                const div = 1.0 / a0;\n\n                return new Coefficients({\n                    a1: a1 * div,\n                    a2: a2 * div,\n                    b0: b0 * div,\n                    b1: b1 * div,\n                    b2: b2 * div\n                });\n            }\n            case FilterType.HighPass: {\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = (1.0 + omega_c) * 0.5;\n                const b1 = -(1.0 + omega_c);\n                const b2 = (1.0 + omega_c) * 0.5;\n                const a0 = 1.0 + alpha;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha;\n\n                const div = 1.0 / a0;\n\n                return new Coefficients({\n                    a1: a1 * div,\n                    a2: a2 * div,\n                    b0: b0 * div,\n                    b1: b1 * div,\n                    b2: b2 * div\n                });\n            }\n            case FilterType.Notch: {\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = 1.0;\n                const b1 = -2.0 * omega_c;\n                const b2 = 1.0;\n                const a0 = 1.0 + alpha;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha;\n\n                const div = 1.0 / a0;\n\n                return new Coefficients({\n                    a1: a1 * div,\n                    a2: a2 * div,\n                    b0: b0 * div,\n                    b1: b1 * div,\n                    b2: b2 * div\n                });\n            }\n            case FilterType.BandPass: {\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = omega_s / 2.0;\n                const b1 = 0;\n                const b2 = -(omega_s / 2.0);\n                const a0 = 1.0 + alpha;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha;\n\n                const div = 1.0 / a0;\n\n                return new Coefficients({\n                    a1: a1 * div,\n                    a2: a2 * div,\n                    b0: b0 * div,\n                    b1: b1 * div,\n                    b2: b2 * div\n                });\n            }\n            case FilterType.AllPass: {\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = 1.0 - alpha;\n                const b1 = -2.0 * omega_c;\n                const b2 = 1.0 + alpha;\n                const a0 = 1.0 + alpha;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha;\n\n                return new Coefficients({\n                    a1: a1 / a0,\n                    a2: a2 / a0,\n                    b0: b0 / a0,\n                    b1: b1 / a0,\n                    b2: b2 / a0\n                });\n            }\n            case FilterType.LowShelf: {\n                const a = Math.pow(10.0, dbGain / 40.0);\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = a * (a + 1.0 - (a - 1.0) * omega_c + 2.0 * alpha * Math.sqrt(a));\n                const b1 = 2.0 * a * (a - 1.0 - (a + 1.0) * omega_c);\n                const b2 = a * (a + 1.0 - (a - 1.0) * omega_c - 2.0 * alpha * Math.sqrt(a));\n                const a0 = a + 1.0 + (a - 1.0) * omega_c + 2.0 * alpha * Math.sqrt(a);\n                const a1 = -2.0 * (a - 1.0 + (a + 1.0) * omega_c);\n                const a2 = a + 1.0 + (a - 1.0) * omega_c - 2.0 * alpha * Math.sqrt(a);\n\n                return new Coefficients({\n                    a1: a1 / a0,\n                    a2: a2 / a0,\n                    b0: b0 / a0,\n                    b1: b1 / a0,\n                    b2: b2 / a0\n                });\n            }\n            case FilterType.HighShelf: {\n                const a = Math.pow(10.0, dbGain / 40.0);\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = a * (a + 1.0 + (a - 1.0) * omega_c + 2.0 * alpha * Math.sqrt(a));\n                const b1 = -2.0 * a * (a - 1.0 + (a + 1.0) * omega_c);\n                const b2 = a * (a + 1.0 + (a - 1.0) * omega_c - 2.0 * alpha * Math.sqrt(a));\n                const a0 = a + 1.0 - (a - 1.0) * omega_c + 2.0 * alpha * Math.sqrt(a);\n                const a1 = 2.0 * (a - 1.0 - (a + 1.0) * omega_c);\n                const a2 = a + 1.0 - (a - 1.0) * omega_c - 2.0 * alpha * Math.sqrt(a);\n\n                return new Coefficients({\n                    a1: a1 / a0,\n                    a2: a2 / a0,\n                    b0: b0 / a0,\n                    b1: b1 / a0,\n                    b2: b2 / a0\n                });\n            }\n            case FilterType.PeakingEQ: {\n                const a = Math.pow(10.0, dbGain / 40.0);\n                const omega_s = Math.sin(omega);\n                const omega_c = Math.cos(omega);\n                const alpha = omega_s / (2.0 * Q);\n\n                const b0 = 1.0 + alpha * a;\n                const b1 = -2.0 * omega_c;\n                const b2 = 1.0 - alpha * a;\n                const a0 = 1.0 + alpha / a;\n                const a1 = -2.0 * omega_c;\n                const a2 = 1.0 - alpha / a;\n\n                return new Coefficients({\n                    a1: a1 / a0,\n                    a2: a2 / a0,\n                    b0: b0 / a0,\n                    b1: b1 / a0,\n                    b2: b2 / a0\n                });\n            }\n            default:\n                throw new TypeError('Invalid filter type');\n        }\n    }\n}\n","import { BiquadFilters, Coefficients } from './Coefficients';\n\nexport interface BiquadSetFilterProps {\n    f0: number;\n    fs: number;\n    Q: number;\n    gain?: number;\n}\n\nexport class BiquadFilter {\n    public x1 = 0.0;\n    public x2 = 0.0;\n    public y1 = 0.0;\n    public y2 = 0.0;\n    public s1 = 0.0;\n    public s2 = 0.0;\n\n    public constructor(public coefficients: Coefficients) {}\n\n    public setFilter(filter: BiquadFilters, options: BiquadSetFilterProps) {\n        const coefficients = Coefficients.from(filter, options.fs, options.f0, options.Q, options.gain);\n\n        this.update(coefficients);\n    }\n\n    public update(coefficients: Coefficients) {\n        this.coefficients = coefficients;\n    }\n\n    public replace(coefficients: Coefficients) {\n        this.coefficients = coefficients;\n    }\n\n    public reset() {\n        this.x1 = 0.0;\n        this.x2 = 0.0;\n        this.y1 = 0.0;\n        this.y2 = 0.0;\n        this.s1 = 0.0;\n        this.s2 = 0.0;\n    }\n\n    public run(input: number) {\n        const { a1, a2, b0, b1, b2 } = this.coefficients;\n\n        const out = b0 * input + b1 * this.x1 + b2 * this.x2 - a1 * this.y1 - a2 * this.y2;\n\n        this.x2 = this.x1;\n        this.x1 = input;\n        this.y2 = this.y1;\n        this.y1 = out;\n\n        return out;\n    }\n\n    public runTransposed(input: number) {\n        const { a1, a2, b0, b1, b2 } = this.coefficients;\n\n        const out = this.s1 + b0 * input;\n\n        this.s1 = this.s2 + b1 * input - a1 * out;\n        this.s2 = b2 * input - a2 * out;\n\n        return out;\n    }\n}\n","export class Frequency {\n    public constructor(private __val: number) {\n        if (typeof __val !== 'number' || isNaN(__val) || __val === Infinity) throw new TypeError('Frequency value must be a number');\n        if (this.__val < 0) throw new Error(`Frequency value cannot be negative (${__val})`);\n    }\n\n    public khz() {\n        return this.__val * 1000.0;\n    }\n\n    public mhz() {\n        return this.__val * 1_000_000.0;\n    }\n\n    public hz() {\n        return this.__val;\n    }\n\n    public dt() {\n        return 1.0 / this.__val;\n    }\n\n    public valueOf() {\n        return this.__val;\n    }\n\n    public toString() {\n        return `${this.__val}Hz`;\n    }\n\n    public toJSON() {\n        return this.toString();\n    }\n}\n","import { Transform, TransformOptions } from 'stream';\n\nexport type PCMType = `s${16 | 32}${'l' | 'b'}e`;\n\nexport interface PCMTransformerOptions extends TransformOptions {\n    type?: PCMType;\n    disabled?: boolean;\n    sampleRate?: number;\n}\n\nexport class PCMTransformer extends Transform {\n    public readonly type: PCMType = 's16le';\n    public bits: number;\n    public bytes: number;\n    public extremum: number;\n    public disabled = false;\n    public sampleRate = 48000;\n    public onUpdate = (): void => {\n        /* noop */\n    };\n\n    public constructor(options: PCMTransformerOptions = {}) {\n        super(options);\n\n        options.type ??= 's16le';\n        this.disabled = !!options.disabled;\n        if (typeof options.sampleRate === 'number' && options.sampleRate > 0) {\n            this.sampleRate = options.sampleRate;\n        }\n\n        switch (options.type) {\n            case 's16be':\n            case 's16le':\n                this.type = options.type;\n                this.bits = 16;\n                break;\n            case 's32be':\n            case 's32le':\n                this.type = options.type;\n                this.bits = 32;\n                break;\n            default:\n                throw new TypeError(`Expected type to be one of ${(['s16be', 's16le', 's32be', 's32le'] as PCMType[]).join(', ')}, got \"${options.type}\"`);\n        }\n\n        this.bytes = this.bits / 8;\n        this.extremum = Math.pow(2, this.bits - 1);\n    }\n\n    public disable() {\n        this.disabled = true;\n    }\n\n    public enable() {\n        this.disabled = false;\n    }\n\n    public toggle() {\n        this.disabled = !this.disabled;\n    }\n\n    public _readInt(buffer: Buffer, index: number) {\n        const method = `readInt${this.type.substring(1).toUpperCase()}` as `readInt${16 | 32}${'L' | 'B'}E`;\n        return buffer[method](index);\n    }\n\n    public _writeInt(buffer: Buffer, int: number, index: number) {\n        const method = `writeInt${this.type.substring(1).toUpperCase()}` as `writeInt${16 | 32}${'L' | 'B'}E`;\n        return buffer[method](int, index);\n    }\n\n    public clamp(val: number, max = this.extremum - 1, min = -this.extremum) {\n        return Math.min(max, Math.max(min, val));\n    }\n}\n","import { TransformCallback } from 'stream';\nimport { PCMTransformer, PCMTransformerOptions } from '../utils';\nimport { BiquadFilter } from './Biquad';\nimport { BiquadFilters, Coefficients, FilterType, Q_BUTTERWORTH } from './Coefficients';\n\nexport interface BiquadStreamOptions extends PCMTransformerOptions {\n    filter?: BiquadFilters;\n    Q?: number;\n    sample?: number;\n    cutoff?: number;\n    gain?: number;\n}\n\nexport interface BiquadFilterUpdateData {\n    filter?: BiquadFilters;\n    Q?: number;\n    sample?: number;\n    cutoff?: number;\n    gain?: number;\n}\n\nexport class BiquadStream extends PCMTransformer {\n    public biquad!: BiquadFilter;\n    public sample = 48000;\n    public cutoff = 80;\n    public gain = 0;\n    public filter!: BiquadFilters;\n    public Q = Q_BUTTERWORTH;\n    public constructor(options: BiquadStreamOptions = {}) {\n        super(options);\n\n        if ('sample' in options) this.sample = options.sample!;\n        if ('cutoff' in options) this.cutoff = options.cutoff!;\n        if ('gain' in options) this.gain = options.gain!;\n        if ('Q' in options) this.Q = options.Q!;\n        if ('filter' in options) {\n            this.filter = options.filter!;\n            if (this.filter != null) {\n                this.biquad = new BiquadFilter(Coefficients.from(this.filter, this.sample, this.cutoff, this.Q, this.gain));\n            }\n        }\n    }\n\n    public getFilterName() {\n        if (this.filter == null) return null;\n        if (typeof this.filter === 'string') return this.filter;\n        return Object.entries(FilterType).find((r) => r[1] === this.filter)?.[0] as BiquadFilters;\n    }\n\n    public update(options: BiquadFilterUpdateData) {\n        if ('sample' in options) this.sample = options.sample!;\n        if ('cutoff' in options) this.cutoff = options.cutoff!;\n        if ('gain' in options) this.gain = options.gain!;\n        if ('Q' in options) this.Q = options.Q!;\n        if ('filter' in options) this.filter = options.filter!;\n\n        if (this.filter != null) {\n            this.biquad = new BiquadFilter(Coefficients.from(this.filter, this.sample, this.cutoff, this.Q, this.gain));\n        }\n\n        this.onUpdate?.();\n    }\n\n    public setFilter(filter: BiquadFilters) {\n        this.update({ filter });\n    }\n\n    public setQ(Q: number) {\n        this.update({ Q });\n    }\n\n    public setSample(fs: number) {\n        this.update({ sample: fs });\n    }\n\n    public setCutoff(f0: number) {\n        this.update({ cutoff: f0 });\n    }\n\n    public setGain(dB: number) {\n        this.update({ gain: dB });\n    }\n\n    public _transform(chunk: Buffer, encoding: BufferEncoding, callback: TransformCallback) {\n        if (this.disabled || !this.biquad) {\n            this.push(chunk);\n            return callback();\n        }\n\n        const endIndex = Math.floor(chunk.length / 2) * 2;\n        const { bytes } = this;\n\n        for (let sampleIndex = 0; sampleIndex < endIndex; sampleIndex += bytes) {\n            const int = this._readInt(chunk, sampleIndex);\n            const result = this.biquad.run(int);\n            this._writeInt(chunk, this.clamp(result), sampleIndex);\n        }\n\n        this.push(chunk);\n        return callback();\n    }\n}\n","import { Equalizer } from './Equalizer';\n\nexport type ReadIntCallback = (buffer: Buffer, index: number) => number;\nexport type WriteIntCallback = (buffer: Buffer, int: number, index: number) => number;\n\nexport class ChannelProcessor {\n    public history: number[];\n    public bandMultipliers: number[];\n    public current: number;\n    public m1: number;\n    public m2: number;\n\n    public constructor(bandMultipliers: number[]) {\n        this.history = new Array(Equalizer.BAND_COUNT * 6).fill(0);\n        this.bandMultipliers = bandMultipliers;\n        this.current = 0;\n        this.m1 = 2;\n        this.m2 = 1;\n    }\n\n    public process(samples: Buffer, extremum = 131072, bytes = 2, readInt?: ReadIntCallback, writeInt?: WriteIntCallback) {\n        const endIndex = Math.floor(samples.length / 2) * 2;\n        for (let sampleIndex = 0; sampleIndex < endIndex; sampleIndex += bytes) {\n            const sample = readInt?.(samples, sampleIndex) ?? samples.readInt16LE(sampleIndex);\n            let result = sample * 0.25;\n\n            for (let bandIndex = 0; bandIndex < Equalizer.BAND_COUNT; bandIndex++) {\n                const x = bandIndex * 6;\n                const y = x + 3;\n\n                const coefficients = Equalizer.Coefficients48000[bandIndex];\n\n                const bandResult = coefficients.alpha * (sample - this.history[x + this.m2]) + coefficients.gamma * this.history[y + this.m1] - coefficients.beta * this.history[y + this.m2];\n\n                this.history[x + this.current] = sample;\n                this.history[y + this.current] = bandResult;\n\n                result += bandResult * this.bandMultipliers[bandIndex];\n            }\n\n            const val = Math.min(extremum - 1, Math.max(-extremum, result * 4.0));\n            writeInt?.(samples, val, sampleIndex) ?? samples.writeInt16LE(val, sampleIndex);\n\n            if (++this.current === 3) {\n                this.current = 0;\n            }\n\n            if (++this.m1 === 3) {\n                this.m1 = 0;\n            }\n\n            if (++this.m2 === 3) {\n                this.m2 = 0;\n            }\n        }\n\n        return samples;\n    }\n\n    public reset() {\n        this.history.fill(0.0);\n    }\n}\n","export class EqualizerCoefficients {\n    public constructor(public beta: number, public alpha: number, public gamma: number) {}\n\n    public setBeta(v: number) {\n        this.beta = v;\n    }\n\n    public setAlpha(v: number) {\n        this.alpha = v;\n    }\n\n    public setGamma(v: number) {\n        this.gamma = v;\n    }\n\n    public toJSON() {\n        const { alpha, beta, gamma } = this;\n\n        return { alpha, beta, gamma };\n    }\n}\n","export class EqualizerConfiguration {\n    public constructor(public bandMultipliers: number[]) {}\n\n    public setGain(band: number, value: number) {\n        if (this.isValidBand(band)) {\n            this.bandMultipliers[band] = Math.max(Math.min(value, 1.0), -0.25);\n        }\n    }\n\n    public getGain(band: number) {\n        if (this.isValidBand(band)) {\n            return this.bandMultipliers[band];\n        } else {\n            return 0.0;\n        }\n    }\n\n    public isValidBand(band: number) {\n        return band >= 0 && band < this.bandMultipliers.length;\n    }\n}\n","import { ChannelProcessor, ReadIntCallback, WriteIntCallback } from './ChannelProcessor';\nimport { EqualizerCoefficients } from './Coefficients';\nimport { EqualizerConfiguration } from './EqualizerConfiguration';\n\nexport interface ChannelProcessorInput {\n    data: Buffer;\n    readInt?: ReadIntCallback;\n    writeInt?: WriteIntCallback;\n    extremum?: number;\n    bytes?: number;\n}\n\nexport class Equalizer extends EqualizerConfiguration {\n    public static BAND_COUNT = 15 as const;\n    public static SAMPLE_RATE = 48000 as const;\n    public static Coefficients48000 = [\n        new EqualizerCoefficients(9.9847546664e-1, 7.6226668143e-4, 1.9984647656),\n        new EqualizerCoefficients(9.9756184654e-1, 1.2190767289e-3, 1.9975344645),\n        new EqualizerCoefficients(9.9616261379e-1, 1.9186931041e-3, 1.9960947369),\n        new EqualizerCoefficients(9.9391578543e-1, 3.0421072865e-3, 1.9937449618),\n        new EqualizerCoefficients(9.9028307215e-1, 4.8584639242e-3, 1.9898465702),\n        new EqualizerCoefficients(9.8485897264e-1, 7.5705136795e-3, 1.9837962543),\n        new EqualizerCoefficients(9.7588512657e-1, 1.2057436715e-2, 1.9731772447),\n        new EqualizerCoefficients(9.6228521814e-1, 1.8857390928e-2, 1.9556164694),\n        new EqualizerCoefficients(9.4080933132e-1, 2.9595334338e-2, 1.9242054384),\n        new EqualizerCoefficients(9.0702059196e-1, 4.6489704022e-2, 1.8653476166),\n        new EqualizerCoefficients(8.5868004289e-1, 7.0659978553e-2, 1.7600401337),\n        new EqualizerCoefficients(7.8409610788e-1, 1.0795194606e-1, 1.5450725522),\n        new EqualizerCoefficients(6.8332861002e-1, 1.5833569499e-1, 1.1426447155),\n        new EqualizerCoefficients(5.5267518228e-1, 2.2366240886e-1, 4.0186190803e-1),\n        new EqualizerCoefficients(4.1811888447e-1, 2.9094055777e-1, -7.0905944223e-1)\n    ];\n    public channels: ChannelProcessor[] = [];\n    public channelCount: number;\n\n    public constructor(channelCount: number, bandMultipliers: number[]) {\n        super(bandMultipliers);\n        this.channelCount = channelCount;\n        this.channels = this.createChannelProcessor();\n    }\n\n    public createChannelProcessor() {\n        return Array.from({ length: this.channelCount }, () => {\n            return new ChannelProcessor(this.bandMultipliers);\n        });\n    }\n\n    public process(input: ChannelProcessorInput[]) {\n        return this.channels.map((c, i) => {\n            const { data, extremum, readInt, writeInt, bytes } = input[i];\n\n            return c.process(data, extremum, bytes, readInt, writeInt);\n        });\n    }\n}\n","import { TransformCallback } from 'stream';\nimport { PCMTransformer, PCMTransformerOptions } from '../utils';\nimport { Equalizer } from './Equalizer';\n\ninterface EqualizerStreamOptions extends PCMTransformerOptions {\n    bandMultiplier?: EqualizerBand[];\n    channels?: number;\n}\n\nexport interface EqualizerBand {\n    band: number;\n    gain: number;\n}\n\nexport class EqualizerStream extends PCMTransformer {\n    public bandMultipliers: number[] = new Array(Equalizer.BAND_COUNT).fill(0);\n    public equalizer: Equalizer;\n    public constructor(options?: EqualizerStreamOptions) {\n        super(options);\n\n        options = Object.assign(\n            {},\n            {\n                bandMultiplier: [],\n                channels: 1\n            },\n            options || {}\n        );\n\n        this.equalizer = new Equalizer(options.channels || 1, this.bandMultipliers);\n        if (Array.isArray(options.bandMultiplier)) this._processBands(options.bandMultiplier);\n    }\n\n    public _processBands(multiplier: EqualizerBand[]) {\n        for (const mul of multiplier) {\n            if (mul.band > Equalizer.BAND_COUNT - 1 || mul.band < 0) throw new RangeError(`Band value out of range. Expected >0 & <${Equalizer.BAND_COUNT - 1}, received \"${mul.band}\"`);\n            this.equalizer.setGain(mul.band, mul.gain);\n        }\n\n        this.onUpdate?.();\n    }\n\n    public _transform(chunk: Buffer, encoding: BufferEncoding, callback: TransformCallback): void {\n        if (this.disabled) {\n            this.push(chunk);\n            return callback();\n        }\n\n        this.equalizer.process([\n            {\n                data: chunk,\n                extremum: this.extremum,\n                readInt: (b, idx) => this._readInt(b, idx),\n                writeInt: (b, i, idx) => this._writeInt(b, i, idx),\n                bytes: this.bytes\n            }\n        ]);\n\n        this.push(chunk);\n\n        return callback();\n    }\n\n    public getEQ() {\n        return this.bandMultipliers.map((m, i) => ({\n            band: i,\n            gain: m\n        })) as EqualizerBand[];\n    }\n\n    public setEQ(bands: EqualizerBand[]) {\n        this._processBands(bands);\n    }\n\n    public resetEQ() {\n        this._processBands(\n            Array.from(\n                {\n                    length: Equalizer.BAND_COUNT\n                },\n                (_, i) => ({\n                    band: i,\n                    gain: 0\n                })\n            )\n        );\n    }\n}\n","import { TransformCallback } from 'stream';\nimport { PCMTransformer, PCMTransformerOptions } from '../utils';\n\n/*\nMono: [0, 1, 2, 3, 4, 5]\nStereo: [0, 1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5]\n*/\n\nexport type MSTStrategy = 'm2s' | 's2m';\n\nexport interface MonoStereoTransformerOptions extends PCMTransformerOptions {\n    strategy: MSTStrategy;\n}\n\nexport class MonoStereoTransformer extends PCMTransformer {\n    public strategy: MSTStrategy;\n\n    public constructor(options?: MonoStereoTransformerOptions) {\n        super(options);\n        if (!['m2s', 's2m'].includes(options?.strategy as MSTStrategy)) {\n            throw new TypeError(`Strategy must be \"m2s\" or \"s2m\"`);\n        }\n\n        this.strategy = options!.strategy;\n    }\n\n    public setStrategy(strategy: MSTStrategy) {\n        this.strategy = strategy;\n    }\n\n    public _transform(chunk: Buffer, encoding: BufferEncoding, callback: TransformCallback): void {\n        if (this.disabled) {\n            this.push(chunk);\n            return callback();\n        }\n\n        const len = Math.floor(chunk.length / 2) * 2;\n\n        if (this.strategy === 'm2s') {\n            this.push(this.toStereo(chunk, len));\n        } else {\n            this.push(this.toMono(chunk, len));\n        }\n\n        return callback();\n    }\n\n    public toStereo(sample: Buffer, len: number) {\n        const bytes = this.bytes;\n        const stereoBuffer = Buffer.alloc(len * 2);\n\n        for (let i = 0; i < len; i += bytes) {\n            stereoBuffer[i * 2 + 0] = sample[i];\n            stereoBuffer[i * 2 + 1] = sample[i + 1];\n            stereoBuffer[i * 2 + 2] = sample[i];\n            stereoBuffer[i * 2 + 3] = sample[i + 1];\n        }\n\n        return stereoBuffer;\n    }\n\n    public toMono(sample: Buffer, len: number) {\n        const bytes = this.bytes;\n        const monoBuffer = Buffer.alloc(Math.floor(len / 2));\n\n        for (let i = 0; i < len; i += bytes) {\n            monoBuffer[i] = sample[i * 2 + 0];\n            monoBuffer[i + 1] = sample[i * 2 + 1];\n        }\n\n        return monoBuffer;\n    }\n}\n","import { TransformCallback } from 'stream';\nimport { PCMTransformer, PCMTransformerOptions } from '../utils';\n\nexport const AudioFilters = {\n    '8D': '8D',\n    Tremolo: 'Tremolo'\n} as const;\n\nexport type PCMFilters = keyof typeof AudioFilters;\n\nexport interface PCMFiltererOptions extends PCMTransformerOptions {\n    filters?: PCMFilters[];\n}\n\n// based on lavadsp\nexport class AudioFilter extends PCMTransformer {\n    public filters: PCMFilters[] = [];\n    private _pulsatorConfig = {\n        hz: 0.03,\n        x: 0,\n        dI: 0.000003926990816987241\n    };\n    private _tremoloConfig = {\n        phase: 0,\n        depth: 0.5,\n        frequency: 2.0\n    };\n\n    public constructor(options?: PCMFiltererOptions) {\n        super(options);\n\n        if (options && Array.isArray(options.filters)) {\n            this.setFilters(options.filters);\n        }\n    }\n\n    public setPulsator(hz: number) {\n        this._pulsatorConfig.hz = hz;\n        const samplesPerCycle = this.sampleRate / (hz * 2 * Math.PI);\n        this._pulsatorConfig.dI = hz === 0 ? 0 : 1 / samplesPerCycle;\n    }\n\n    public get pulsator() {\n        return this._pulsatorConfig.hz;\n    }\n\n    public setTremolo({ depth = this._tremoloConfig.depth, frequency = this._tremoloConfig.frequency, phase = this._tremoloConfig.phase }: { phase?: number; depth?: number; frequency?: number }) {\n        if (typeof depth === 'number') this._tremoloConfig.depth = depth;\n        if (typeof frequency === 'number') this._tremoloConfig.frequency = frequency;\n        if (typeof phase === 'number') this._tremoloConfig.phase = phase;\n    }\n\n    public get tremolo() {\n        return this._tremoloConfig;\n    }\n\n    public setFilters(filters: PCMFilters[]) {\n        if (!Array.isArray(filters) || !filters.every((r) => r in AudioFilters)) {\n            throw new TypeError('Invalid or unknown filter');\n        }\n\n        this.filters = filters;\n\n        this.onUpdate?.();\n    }\n\n    public _transform(chunk: Buffer, encoding: BufferEncoding, callback: TransformCallback): void {\n        if (this.disabled || !this.filters.length) {\n            return callback(null, chunk);\n        }\n\n        const len = Math.floor(chunk.length / 2) * 2;\n        const { bytes } = this;\n        let j = 0;\n\n        for (let i = 0; i < len; i += bytes) {\n            const int = this._readInt(chunk, i);\n            const value = this.applyFilters(int, j++);\n            this._writeInt(chunk, this.clamp(value), i);\n        }\n\n        this.push(chunk);\n\n        return callback();\n    }\n\n    public applyFilters(byte: number, idx: number) {\n        if (!this.filters.length) return byte;\n\n        for (const filter of this.filters) {\n            if (filter === '8D') byte = this.applyRotation(byte, idx);\n            if (filter === 'Tremolo') byte = this.applyTremolo(byte);\n        }\n\n        return byte;\n    }\n\n    public applyRotation(int: number, idx: number) {\n        const sin = Math.sin(this._pulsatorConfig.x);\n        const res = (int * ((idx % 2 === 0 ? sin : -sin) + 1.0)) / 2.0;\n        this._pulsatorConfig.x += this._pulsatorConfig.dI;\n        return res;\n    }\n\n    public applyTremolo(int: number) {\n        const fOffset = 1.0 - this._tremoloConfig.depth;\n        const modSignal = fOffset + this._tremoloConfig.depth * Math.sin(this._tremoloConfig.phase);\n        this._tremoloConfig.phase += ((2 * Math.PI) / this.sampleRate) * this._tremoloConfig.frequency;\n        return modSignal * int;\n    }\n}\n","export * from './biquad';\nexport * from './equalizer';\nexport * from './utils';\nexport * from './audio';\n\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '0.1.4';\n"],"mappings":"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","names":[]}