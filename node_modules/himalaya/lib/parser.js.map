{"version":3,"sources":["parser.js"],"names":["parser","hasTerminalParent","rewindStack","parse","tokens","options","root","tagName","children","state","cursor","stack","terminals","tagParents","currentIndex","length","parentTagName","newLength","childrenEndPosition","endPosition","position","end","i","len","splice","nodes","token","type","push","tagToken","content","toLowerCase","close","index","shouldRewind","endToken","start","isClosingTag","closingTags","shouldRewindToAutoClose","closingTagAncestorBreakers","previousIndex","attributes","attrToken","elementNode","hasChildren","voidTags","size","innerState","rewoundInElement"],"mappings":"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","file":"parser.js","sourcesContent":["import {arrayIncludes} from './compat'\n\nexport default function parser (tokens, options) {\n  const root = {tagName: null, children: []}\n  const state = {tokens, options, cursor: 0, stack: [root]}\n  parse(state)\n  return root.children\n}\n\nexport function hasTerminalParent (tagName, stack, terminals) {\n  const tagParents = terminals[tagName]\n  if (tagParents) {\n    let currentIndex = stack.length - 1\n    while (currentIndex >= 0) {\n      const parentTagName = stack[currentIndex].tagName\n      if (parentTagName === tagName) {\n        break\n      }\n      if (arrayIncludes(tagParents, parentTagName)) {\n        return true\n      }\n      currentIndex--\n    }\n  }\n  return false\n}\n\nexport function rewindStack (stack, newLength, childrenEndPosition, endPosition) {\n  stack[newLength].position.end = endPosition\n  for (let i = newLength + 1, len = stack.length; i < len; i++) {\n    stack[i].position.end = childrenEndPosition\n  }\n  stack.splice(newLength)\n}\n\nexport function parse (state) {\n  const {tokens, options} = state\n  let {stack} = state\n  let nodes = stack[stack.length - 1].children\n  const len = tokens.length\n  let {cursor} = state\n  while (cursor < len) {\n    const token = tokens[cursor]\n    if (token.type !== 'tag-start') {\n      nodes.push(token)\n      cursor++\n      continue\n    }\n\n    const tagToken = tokens[++cursor]\n    cursor++\n    const tagName = tagToken.content.toLowerCase()\n    if (token.close) {\n      let index = stack.length\n      let shouldRewind = false\n      while (--index > -1) {\n        if (stack[index].tagName === tagName) {\n          shouldRewind = true\n          break\n        }\n      }\n      while (cursor < len) {\n        const endToken = tokens[cursor]\n        if (endToken.type !== 'tag-end') break\n        cursor++\n      }\n      if (shouldRewind) {\n        rewindStack(stack, index, token.position.start, tokens[cursor - 1].position.end)\n        break\n      } else {\n        continue\n      }\n    }\n\n    const isClosingTag = arrayIncludes(options.closingTags, tagName)\n    let shouldRewindToAutoClose = isClosingTag\n    if (shouldRewindToAutoClose) {\n      const { closingTagAncestorBreakers: terminals } = options\n      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals)\n    }\n\n    if (shouldRewindToAutoClose) {\n      // rewind the stack to just above the previous\n      // closing tag of the same name\n      let currentIndex = stack.length - 1\n      while (currentIndex > 0) {\n        if (tagName === stack[currentIndex].tagName) {\n          rewindStack(stack, currentIndex, token.position.start, token.position.start)\n          const previousIndex = currentIndex - 1\n          nodes = stack[previousIndex].children\n          break\n        }\n        currentIndex = currentIndex - 1\n      }\n    }\n\n    let attributes = []\n    let attrToken\n    while (cursor < len) {\n      attrToken = tokens[cursor]\n      if (attrToken.type === 'tag-end') break\n      attributes.push(attrToken.content)\n      cursor++\n    }\n\n    cursor++\n    const children = []\n    const position = {\n      start: token.position.start,\n      end: attrToken.position.end\n    }\n    const elementNode = {\n      type: 'element',\n      tagName: tagToken.content,\n      attributes,\n      children,\n      position\n    }\n    nodes.push(elementNode)\n\n    const hasChildren = !(attrToken.close || arrayIncludes(options.voidTags, tagName))\n    if (hasChildren) {\n      const size = stack.push({tagName, children, position})\n      const innerState = {tokens, options, cursor, stack}\n      parse(innerState)\n      cursor = innerState.cursor\n      const rewoundInElement = stack.length === size\n      if (rewoundInElement) {\n        elementNode.position.end = tokens[cursor - 1].position.end\n      }\n    }\n  }\n  state.cursor = cursor\n}\n"]}