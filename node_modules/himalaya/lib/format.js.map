{"version":3,"sources":["format.js"],"names":["splitHead","unquote","format","formatAttributes","str","sep","idx","indexOf","slice","length","car","charAt","end","isQuoteStart","nodes","options","map","type","node","outputNode","tagName","toLowerCase","attributes","children","content","includePositions","position","parts","attribute","trim","key","value"],"mappings":";;;;;QAAgBA,S,GAAAA,S;QAMAC,O,GAAAA,O;QAUAC,M,GAAAA,M;QAkBAC,gB,GAAAA,gB;AAlCT,SAASH,SAAT,CAAoBI,GAApB,EAAyBC,GAAzB,EAA8B;AACnC,MAAMC,MAAMF,IAAIG,OAAJ,CAAYF,GAAZ,CAAZ;AACA,MAAIC,QAAQ,CAAC,CAAb,EAAgB,OAAO,CAACF,GAAD,CAAP;AAChB,SAAO,CAACA,IAAII,KAAJ,CAAU,CAAV,EAAaF,GAAb,CAAD,EAAoBF,IAAII,KAAJ,CAAUF,MAAMD,IAAII,MAApB,CAApB,CAAP;AACD;;AAEM,SAASR,OAAT,CAAkBG,GAAlB,EAAuB;AAC5B,MAAMM,MAAMN,IAAIO,MAAJ,CAAW,CAAX,CAAZ;AACA,MAAMC,MAAMR,IAAIK,MAAJ,GAAa,CAAzB;AACA,MAAMI,eAAeH,QAAQ,GAAR,IAAeA,QAAQ,GAA5C;AACA,MAAIG,gBAAgBH,QAAQN,IAAIO,MAAJ,CAAWC,GAAX,CAA5B,EAA6C;AAC3C,WAAOR,IAAII,KAAJ,CAAU,CAAV,EAAaI,GAAb,CAAP;AACD;AACD,SAAOR,GAAP;AACD;;AAEM,SAASF,MAAT,CAAiBY,KAAjB,EAAwBC,OAAxB,EAAiC;AACtC,SAAOD,MAAME,GAAN,CAAU,gBAAQ;AACvB,QAAMC,OAAOC,KAAKD,IAAlB;AACA,QAAME,aAAaF,SAAS,SAAT,GACf;AACAA,gBADA;AAEAG,eAASF,KAAKE,OAAL,CAAaC,WAAb,EAFT;AAGAC,kBAAYnB,iBAAiBe,KAAKI,UAAtB,CAHZ;AAIAC,gBAAUrB,OAAOgB,KAAKK,QAAZ,EAAsBR,OAAtB;AAJV,KADe,GAOf,EAAEE,UAAF,EAAQO,SAASN,KAAKM,OAAtB,EAPJ;AAQA,QAAIT,QAAQU,gBAAZ,EAA8B;AAC5BN,iBAAWO,QAAX,GAAsBR,KAAKQ,QAA3B;AACD;AACD,WAAOP,UAAP;AACD,GAdM,CAAP;AAeD;;AAEM,SAAShB,gBAAT,CAA2BmB,UAA3B,EAAuC;AAC5C,SAAOA,WAAWN,GAAX,CAAe,qBAAa;AACjC,QAAMW,QAAQ3B,UAAU4B,UAAUC,IAAV,EAAV,EAA4B,GAA5B,CAAd;AACA,QAAMC,MAAMH,MAAM,CAAN,CAAZ;AACA,QAAMI,QAAQ,OAAOJ,MAAM,CAAN,CAAP,KAAoB,QAApB,GACV1B,QAAQ0B,MAAM,CAAN,CAAR,CADU,GAEV,IAFJ;AAGA,WAAO,EAACG,QAAD,EAAMC,YAAN,EAAP;AACD,GAPM,CAAP;AAQD","file":"format.js","sourcesContent":["export function splitHead (str, sep) {\n  const idx = str.indexOf(sep)\n  if (idx === -1) return [str]\n  return [str.slice(0, idx), str.slice(idx + sep.length)]\n}\n\nexport function unquote (str) {\n  const car = str.charAt(0)\n  const end = str.length - 1\n  const isQuoteStart = car === '\"' || car === \"'\"\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end)\n  }\n  return str\n}\n\nexport function format (nodes, options) {\n  return nodes.map(node => {\n    const type = node.type\n    const outputNode = type === 'element'\n      ? {\n        type,\n        tagName: node.tagName.toLowerCase(),\n        attributes: formatAttributes(node.attributes),\n        children: format(node.children, options)\n      }\n      : { type, content: node.content }\n    if (options.includePositions) {\n      outputNode.position = node.position\n    }\n    return outputNode\n  })\n}\n\nexport function formatAttributes (attributes) {\n  return attributes.map(attribute => {\n    const parts = splitHead(attribute.trim(), '=')\n    const key = parts[0]\n    const value = typeof parts[1] === 'string'\n      ? unquote(parts[1])\n      : null\n    return {key, value}\n  })\n}\n"]}