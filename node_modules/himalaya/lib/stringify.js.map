{"version":3,"sources":["stringify.js"],"names":["formatAttributes","toHTML","attributes","reduce","attrs","attribute","key","value","quoteEscape","indexOf","quote","tree","options","map","node","type","content","tagName","children","isSelfClosing","voidTags","toLowerCase","join"],"mappings":";;;;;QAEgBA,gB,GAAAA,gB;QAYAC,M,GAAAA,M;;AAdhB;;AAEO,SAASD,gBAAT,CAA2BE,UAA3B,EAAuC;AAC5C,SAAOA,WAAWC,MAAX,CAAkB,UAACC,KAAD,EAAQC,SAAR,EAAsB;AAAA,QACtCC,GADsC,GACxBD,SADwB,CACtCC,GADsC;AAAA,QACjCC,KADiC,GACxBF,SADwB,CACjCE,KADiC;;AAE7C,QAAIA,UAAU,IAAd,EAAoB;AAClB,aAAUH,KAAV,SAAmBE,GAAnB;AACD;AACD,QAAME,cAAcD,MAAME,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA7C;AACA,QAAMC,QAAQF,cAAc,GAAd,GAAoB,IAAlC;AACA,WAAUJ,KAAV,SAAmBE,GAAnB,SAA0BI,KAA1B,GAAkCH,KAAlC,GAA0CG,KAA1C;AACD,GARM,EAQJ,EARI,CAAP;AASD;;AAEM,SAAST,MAAT,CAAiBU,IAAjB,EAAuBC,OAAvB,EAAgC;AACrC,SAAOD,KAAKE,GAAL,CAAS,gBAAQ;AACtB,QAAIC,KAAKC,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOD,KAAKE,OAAZ;AACD;AACD,QAAIF,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,sBAAcD,KAAKE,OAAnB;AACD;AANqB,QAOfC,OAPe,GAOkBH,IAPlB,CAOfG,OAPe;AAAA,QAONf,UAPM,GAOkBY,IAPlB,CAONZ,UAPM;AAAA,QAOMgB,QAPN,GAOkBJ,IAPlB,CAOMI,QAPN;;AAQtB,QAAMC,gBAAgB,2BAAcP,QAAQQ,QAAtB,EAAgCH,QAAQI,WAAR,EAAhC,CAAtB;AACA,WAAOF,sBACCF,OADD,GACWjB,iBAAiBE,UAAjB,CADX,eAECe,OAFD,GAEWjB,iBAAiBE,UAAjB,CAFX,SAE2CD,OAAOiB,QAAP,EAAiBN,OAAjB,CAF3C,UAEyEK,OAFzE,MAAP;AAGD,GAZM,EAYJK,IAZI,CAYC,EAZD,CAAP;AAaD;;kBAEc,EAACrB,cAAD,E","file":"stringify.js","sourcesContent":["import {arrayIncludes} from './compat'\n\nexport function formatAttributes (attributes) {\n  return attributes.reduce((attrs, attribute) => {\n    const {key, value} = attribute\n    if (value === null) {\n      return `${attrs} ${key}`\n    }\n    const quoteEscape = value.indexOf('\\'') !== -1\n    const quote = quoteEscape ? '\"' : '\\''\n    return `${attrs} ${key}=${quote}${value}${quote}`\n  }, '')\n}\n\nexport function toHTML (tree, options) {\n  return tree.map(node => {\n    if (node.type === 'text') {\n      return node.content\n    }\n    if (node.type === 'comment') {\n      return `<!--${node.content}-->`\n    }\n    const {tagName, attributes, children} = node\n    const isSelfClosing = arrayIncludes(options.voidTags, tagName.toLowerCase())\n    return isSelfClosing\n      ? `<${tagName}${formatAttributes(attributes)}>`\n      : `<${tagName}${formatAttributes(attributes)}>${toHTML(children, options)}</${tagName}>`\n  }).join('')\n}\n\nexport default {toHTML}\n"]}