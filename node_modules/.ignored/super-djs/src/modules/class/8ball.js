const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

const { EmbedBuilder } = require('discord.js');

module.exports = class EightBall {
    constructor(question, responses) {
        if (!question) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'question' is required to provide.`);

        if (typeof question !== "string") throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'question' is not a String.`);

        if (!responses) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'responses' is required to provide.`);

        if (!Array.isArray(responses)) throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'responses' is not an Array.`);

        this.q = question;
        this.w = responses;
    };

    configure(options =
        {
            discordApi: {
                returnEphemeral: false
            }
        }
    ) {
        this.options = options;
        return this;
    };

    setMainEmbed(embed) {
        this.mainEmbed = embed;
        return this;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        // Start:
        try {
            const response = this.w[Math.floor(Math.random() * this.w.length)];

            return interaction.reply({
                embeds: [
                    this.mainEmbed ? this.mainEmbed.addFields(
                        { name: "Question", value: this.q.endsWith('?') ? this.q.toString() : `${this.q}?` },
                        { name: "Response", value: response.toString().substr(0, 1024) }
                    ) : new EmbedBuilder()
                        .setTitle('8Ball')
                        .addFields(
                            { name: "Question", value: this.q.endsWith('?') ? this.q.toString() : `${this.q}?` },
                            { name: "Response", value: response.toString().substr(0, 1024) }
                        )
                        .setColor('Blue')
                ],
                ephemeral: this.options?.discordApi.returnEphemeral ? true : false
            });
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};
