const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

const { EmbedBuilder } = require('discord.js');

module.exports = class GhostPingDetector {
    constructor() {
        return this;
    };

    configure(options =
        {
            discordApi: {
                channelToLog: null
            }
        }
    ) {
        this.options = options;
        return this;
    };

    setMainEmbed(embed) {
        this.mainEmbed = embed;
        return this;
    };

    async run(message) {
        if (!message) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'message' is required to provide.`);

        // Start:
        try {
            if (message.mentions.members.first()) {
                if (message.mentions.members.first()?.id === message.author.id) return;

                let embed = new EmbedBuilder()
                    .setTitle("Ghost Ping Detector")
                    .setDescription(`So **${message.author.tag}** decided to ghost ping a user...`)
                    .addFields(
                        { name: "User", value: `${message.author}` },
                        { name: "Message", value: message.content.toString().substr(0, 1024) }
                    )
                    .setColor("Red");

                if (this.options?.discordApi?.channelToLog || this.options?.discordApi?.channelToLog !== null) {
                    const channelToLog = await message.guild.channels.cache.get(this.options?.discordApi?.channelToLog);

                    return channelToLog.send({
                        embeds: [
                            this.mainEmbed ? this.mainEmbed.addFields(
                                { name: "User", value: `${message.author}` },
                                { name: "Message", value: message.content.toString().substr(0, 1024) }
                            ) : embed
                        ]
                    });
                } else {
                    return message.channel.send({
                        embeds: [
                            this.mainEmbed ? this.mainEmbed.addFields(
                                { name: "User", value: `${message.author}` },
                                { name: "Message", value: message.content.toString().substr(0, 1024) }
                            ) : embed
                        ]
                    });
                };
            } else return;
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};