const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

try {
    require('node-fetch');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] node-fetch package is not installed, run in the terminal this command: npm i node-fetch`);
};

const { EmbedBuilder } = require('discord.js');
const fetch = require('node-fetch');

module.exports = class SearchNpm {
    constructor(pkg) {
        if (!pkg) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'pkg' is required to provide.`);

        this.package = pkg;
    };

    configure(options =
        {
            discordApi: {
                returnEphemeral: false
            }
        }
    ) {
        this.options = options;
        return this;
    };

    setMainEmbed(embed, options = {
        setNpmLogo: false,
        allInline: false
    }) {
        let e;
        if (options.setNpmLogo === true) {
            e = embed.setThumbnail('https://authy.com/wp-content/uploads/npm-logo.png');
        } else {
            e = embed;
        };
        this.inline = options.allInline;
        this.mainEmbed = e;
        return this;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        // Start:
        try {
            await interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setDescription('Getting data...')
                        .setColor('Yellow')
                ],
                ephemeral: this.options?.discordApi.returnEphemeral ? true : false
            });

            try {
                const body = await fetch(`https://registry.npmjs.com/${this.package}`).then((res) => {
                    if (res.status === 404) return;
                    return res.json();
                });

                let keywords = [];

                if (body.keywords) {
                    await body.keywords.forEach((keyword) => {
                        keywords.push(keyword);
                    });
                } else {
                    keywords.push('[!] No keywords');
                };

                return interaction.editReply({
                    embeds: [
                        this.mainEmbed ? this.mainEmbed
                            .addFields(
                                { name: "Description", value: `${body.description || "[!] No description."}`, inline: this.inline ? true : false },
                                { name: "Last release", value: `__${body["dist-tags"].latest}__ - Released on: ${new Date(body.time[body["dist-tags"].latest]).toLocaleString()}`, inline: this.inline ? true : false },
                                { name: "License", value: `${body.license || "[!] No license."}`, inline: this.inline ? true : false },
                                { name: "Creation date", value: `${new Date(body.time.created).toLocaleString() || "[!] Error."}`, inline: this.inline ? true : false },
                                { name: "Keywords", value: `${keywords.join(', ')}.`, inline: this.inline ? true : false }
                            ) : new EmbedBuilder()
                                .setTitle(`Package: ${body.name}`)
                                .setThumbnail('https://authy.com/wp-content/uploads/npm-logo.png')
                                .addFields(
                                    { name: "Description", value: `${body.description || "[!] No description."}`, inline: this.inline ? true : false },
                                    { name: "Last release", value: `__${body["dist-tags"].latest}__ - Released on: ${new Date(body.time[body["dist-tags"].latest]).toLocaleString()}`, inline: this.inline ? true : false },
                                    { name: "License", value: `${body.license || "[!] No license."}`, inline: this.inline ? true : false },
                                    { name: "Creation date", value: `${new Date(body.time.created).toLocaleString() || "[!] Error."}`, inline: this.inline ? true : false },
                                    { name: "Keywords", value: `${keywords.join(', ')}.` }
                                )
                                .setColor("Red")
                    ]
                }).catch(() => { });
            } catch (err) {
                console.log(err)
                return interaction.editReply({
                    embeds: [
                        new EmbedBuilder()
                            .setDescription('Couldn\'t be found.')
                            .setColor('Red')
                    ]
                }).catch(() => { });
            };
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};
