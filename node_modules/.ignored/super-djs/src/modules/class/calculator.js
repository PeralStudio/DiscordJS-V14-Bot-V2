const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

try {
    require('mathjs');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] mathjs package is not installed, run in the terminal this command: npm i mathjs`);
};

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, codeBlock, SelectMenuBuilder } = require('discord.js');
const mathjs = require('mathjs');

module.exports = class Calculator {
    constructor() {
        return this;
    };

    configure(options =
        {
            name: "Calculator",
            discordApi: {
                returnEphemeral: false
            },
            colors: {
                main: "Blue",
                result: "Green"
            }
        }
    ) {
        this.options = options;
        return this;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        let actionRow = [
            new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('ac')
                        .setLabel('AC')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('delete')
                        .setLabel('Del')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('exit')
                        .setLabel('Exit')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('(')
                        .setLabel('(')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(')')
                        .setLabel(')')
                        .setStyle(ButtonStyle.Primary)
                ),
            new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('1')
                        .setLabel('1')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('2')
                        .setLabel('2')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('3')
                        .setLabel('3')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('+')
                        .setLabel('+')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('/')
                        .setLabel('/')
                        .setStyle(ButtonStyle.Primary),
                ),
            new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('4')
                        .setLabel('4')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('5')
                        .setLabel('5')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('6')
                        .setLabel('6')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('-')
                        .setLabel('-')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('%')
                        .setLabel('%')
                        .setStyle(ButtonStyle.Primary),
                ),
            new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('7')
                        .setLabel('7')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('8')
                        .setLabel('8')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('9')
                        .setLabel('9')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('*')
                        .setLabel('*')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('scientific_mode')
                        .setLabel('More')
                        .setStyle(ButtonStyle.Secondary),
                ),
            new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('.')
                        .setLabel('.')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('0')
                        .setLabel('0')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('00')
                        .setLabel('00')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('=')
                        .setLabel('=')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('NO_ID')
                        .setLabel(' ')
                        .setDisabled(true)
                        .setStyle(ButtonStyle.Secondary)
                ),
            new ActionRowBuilder()
                .addComponents(
                    new SelectMenuBuilder()
                        .setCustomId('calculator_select_menu')
                        .setPlaceholder('Select a Scientific key')
                        .addOptions(
                            {
                                label: 'Square Root',
                                value: 'sqrt(',
                            },
                            {
                                label: 'Pi',
                                value: 'pi',
                            },
                            {
                                label: 'Sinus',
                                value: 'sin(',
                            },
                            {
                                label: 'Cosinus',
                                value: 'cos(',
                            },
                            {
                                label: 'Tangente',
                                value: 'tan(',
                            },
                            {
                                label: 'Logarithm',
                                value: 'log(',
                            },
                            {
                                label: 'Absolute Value',
                                value: '|',
                            },
                            {
                                label: 'Factoriel',
                                value: '!',
                            }
                        )
                )
        ]

        // Start:
        try {
            let data = "";

            interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setTitle(this.options?.name || "Calculator")
                        .setDescription(`Your evaluation: \n` + codeBlock('txt', "[!] Start using the buttons below."))
                        .setColor(this.options?.colors?.main || "Blue")
                ],
                components: [
                    actionRow[0], actionRow[1], actionRow[2], actionRow[3], actionRow[4]
                ],
                ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
            });

            const collector = interaction.channel.createMessageComponentCollector({
                filter: i => i.user.id === interaction.user.id,
                type: ComponentType.Button
            });

            const collectorMenu = interaction.channel.createMessageComponentCollector({
                filter: i => i.user.id === interaction.user.id,
                type: ComponentType.SelectMenu
            });

            // Collector for the buttons:
            collector.on('collect', async (i) => {
                if (!i.isButton()) return;

                if (i.customId === "=") {
                    let result;

                    try {
                        result = await mathjs.evaluate(data);

                        if (result.toString().toLowerCase() === "infinity") result = 'Infinity (âˆž)';
                    } catch (err) {
                        result = `[!] Error: Couldn't be solved.`
                    };

                    await i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Result: \n` + codeBlock('txt', result || "0"))
                                .setColor(this.options?.colors?.result || "Green")
                        ]
                    }).catch(() => { });

                    data = "";
                } else if (i.customId === "ac") {
                    data = "";

                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Your evaluation: \n` + codeBlock('txt', "[!] Done, all cleared."))
                                .setColor(this.options?.colors?.main || "Blue")
                        ]
                    }).catch(() => { });

                } else if (i.customId === "delete") {
                    data = data.slice(0, data.length - 1);

                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Your evaluation: \n` + codeBlock('txt', data || "[!] Start using the buttons below."))
                                .setColor(this.options?.colors?.main || "Blue")
                        ]
                    }).catch(() => { });

                } else if (i.customId === "exit") {
                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Status: \n` + codeBlock('txt', "[!] Calculator is off."))
                                .setColor(this.options?.colors?.main || "Blue")
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[0].components.map((btn) => btn.setDisabled(true))
                                ),
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[1].components.map((btn) => btn.setDisabled(true))
                                ),
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[2].components.map((btn) => btn.setDisabled(true))
                                ),
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[3].components.map((btn) => btn.setDisabled(true))
                                ),
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[4].components.map((btn) => btn.setDisabled(true))
                                )
                        ]
                    }).catch(() => { });

                    collector.stop();
                    return collectorMenu.stop();
                } else if (i.customId === "scientific_mode") {
                    i.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription('Choose a key from the select menu below.')
                                .setColor(this.options?.colors?.result || "Green")
                        ],
                        components: [
                            actionRow[5]
                        ],
                        ephemeral: true
                    }).catch(() => { });

                } else {
                    let id = i.customId;
                    if (id === "=" || id === "ac" || id === "delete" || id === "exit" || id === "scientific_mode") return;

                    data += i.customId;

                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Your evaluation: \n` + codeBlock('txt', data || " "))
                                .setColor(this.options?.colors?.main || "Blue")
                        ]
                    }).catch(() => { });

                };
            });

            collectorMenu.on('collect', async (i) => {
                if (!i.isSelectMenu()) return;

                if (i.values) {
                    data += i.values[0];

                    interaction.editReply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle(this.options?.name || "Calculator")
                                .setDescription(`Your evaluation: \n` + codeBlock('txt', data || " "))
                                .setColor(this.options?.colors?.main || "Blue")
                        ]
                    }).catch(() => { });

                    // Required to avoid the "Interaction has failed" while it's working.
                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription('Choose a key from the select menu below.')
                                .setColor(this.options?.colors?.result || "Green")
                        ]
                    }).catch(() => { }); 
                }
            });

            // Collector for the menu:
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};