const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = class RPS {
    constructor(client, fighter) {
        if (!client) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'client' is required to provide.`);

        if (!fighter) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'fighter' is required to provide.`);

        this.fighter = fighter;
        this.client = client;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        // Start:
        try {
            let actionRow = [
                new ActionRowBuilder()
                    .setComponents(
                        new ButtonBuilder()
                            .setLabel('Accept')
                            .setCustomId('super_djs_accept_btn')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setLabel('Deny')
                            .setCustomId('super_djs_deny_btn')
                            .setStyle(ButtonStyle.Danger)
                    ),
                new ActionRowBuilder()
                    .setComponents(
                        new ButtonBuilder()
                            .setLabel('Rock')
                            .setCustomId(`rock_${interaction.user.id}`)
                            .setEmoji('🪨')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setLabel('Paper')
                            .setCustomId(`paper_${interaction.user.id}`)
                            .setEmoji('🧻')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setLabel('Scissors')
                            .setCustomId(`sci_${interaction.user.id}`)
                            .setEmoji('✂️')
                            .setStyle(ButtonStyle.Secondary)
                    ),
                new ActionRowBuilder()
                    .setComponents(
                        new ButtonBuilder()
                            .setLabel('Rock')
                            .setCustomId(`rock_${this.fighter}`)
                            .setEmoji('🪨')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setLabel('Paper')
                            .setCustomId(`paper_${this.fighter}`)
                            .setEmoji('🧻')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setLabel('Scissors')
                            .setCustomId(`sci_${this.fighter}`)
                            .setEmoji('✂️')
                            .setStyle(ButtonStyle.Secondary)
                    )
            ];

            interaction.reply({
                content: `${interaction.guild.members.cache.get(this.fighter) || "**Unknown#0000**"}`,
                embeds: [
                    new EmbedBuilder()
                        .setTitle('RPS Challenge - Waiting Response')
                        .setDescription(`Hey ${interaction.guild.members.cache.get(this.fighter).user || "**Unknown#0000**"}, would you like to fight with ${interaction.user}?`)
                        .setFooter({
                            text: "This request expires in 10 seconds."
                        })
                        .setColor('Blue')
                ],
                components: [
                    actionRow[0]
                ]
            }).catch(() => { });

            const collectorGameCheck = interaction.channel.createMessageComponentCollector({
                filter: u => u.user.id === this.fighter,
                type: ComponentType.Button,
                time: 10000
            });

            collectorGameCheck.on('collect', async (i) => {
                if (i.user.id !== this.fighter) return i.reply({ content: 'That is not for you.', ephemeral: true });

                if (i.customId === "super_djs_accept_btn") {
                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('RPS Challenge - Accepted')
                                .setDescription('Challenge accepted.')
                                .setColor('Green')
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[0].components.map((btn) => btn.setDisabled(true))
                                )
                        ]
                    }).catch(() => { });

                    collectorGameCheck.stop();

                    // Main:
                    const collectorMain = interaction.channel.createMessageComponentCollector({
                        filter: u => u.user.id === interaction.user.id,
                        type: ComponentType.Button,
                        time: 10000
                    });

                    interaction.channel.send({
                        content: `${interaction.user}, your turn!\n(You have **10** seconds to choose.)`,
                        components: [
                            actionRow[1]
                        ]
                    }).then(async (recheck1) => {
                        setTimeout(async () => {
                            recheck1.edit({
                                components: [
                                    new ActionRowBuilder()
                                    .addComponents(
                                        actionRow[1].components.map((btn) => btn.setDisabled(true))
                                    )
                                ]
                            }).catch(() => { });
                        }, 9500)
                    });

                    collectorMain.on('collect', async (i2) => {
                        const final1 = i2.customId.split('_');
                        this.result1 = final1[0];

                        i2.update({
                            content: `${interaction.user}, your turn!\n(Choice chosen!)`,
                            components: [
                                new ActionRowBuilder()
                                    .addComponents(
                                        actionRow[1].components.map((btn) => btn.setDisabled(true))
                                    )
                            ]
                        }).catch(() => { });

                        collectorMain.stop();
                    });

                    collectorMain.on('end', async () => {
                        // Second:
                        const collectorFighter = interaction.channel.createMessageComponentCollector({
                            filter: u => u.user.id === this.fighter,
                            type: ComponentType.Button,
                            time: 10000
                        });

                        interaction.channel.send({
                            content: `${interaction.guild.members.cache.get(this.fighter)}, now it's your turn!\n(You have **10** seconds to choose.)`,
                            components: [
                                actionRow[2]
                            ]
                        }).then(async (recheck2) => {
                            setTimeout(async () => {
                                recheck2.edit({
                                    components: [
                                        new ActionRowBuilder()
                                        .addComponents(
                                            actionRow[2].components.map((btn) => btn.setDisabled(true))
                                        )
                                    ]
                                }).catch(() => { });
                            }, 9500)
                        });

                        collectorFighter.on('collect', async (i3) => {
                            const final2 = i3.customId.split('_');
                            this.result2 = final2[0];

                            i3.update({
                                content: `${interaction.guild.members.cache.get(this.fighter)}, now it's your turn!\n(Choice chosen!)`,
                                components: [
                                    new ActionRowBuilder()
                                        .addComponents(
                                            actionRow[2].components.map((btn) => btn.setDisabled(true))
                                        )
                                ]
                            }).catch(() => { });

                            collectorFighter.stop();
                        });

                        collectorFighter.on('end', async () => {
                            interaction.channel.send({
                                content: `**[!] Calculating the winner...**`
                            }).then(async (sent) => {

                                if (typeof this.result1 === 'undefined' && typeof this.result2 === 'undefined') return sent.edit({
                                    content: `Hmm... Both players didn't choose one of the choices, so who is the winner? 🤨`
                                });

                                if (typeof this.result1 === 'undefined') return sent.edit({
                                    content: `Seems like ${interaction.user} didn't choose one of the choices within 10 seconds, then the winner is... ${interaction.guild.members.cache.get(this.fighter)}! 🎉`
                                });

                                if (typeof this.result2 === 'undefined') return sent.edit({
                                    content: `Seems like ${interaction.guild.members.cache.get(this.fighter)} didn't choose one of the choices within 10 seconds, then the winner is... ${interaction.user}! 🎉`
                                });

                                const resultMain = this.result1;
                                const resultFighter = this.result2;

                                let replaceValue = {
                                    rock: '🪨',
                                    paper: '🧻',
                                    sci: '✂️'
                                }

                                let finalResult;

                                if (resultMain === resultFighter) finalResult = 'tie';
                                if (resultMain === 'rock' && resultFighter === 'sci') finalResult = 'mainWin';
                                if (resultMain === 'paper' && resultFighter === 'rock') finalResult = 'mainWin';
                                if (resultMain === 'sci' && resultFighter === 'paper') finalResult = 'mainWin';

                                if (resultMain === 'rock' && resultFighter === 'paper') finalResult = 'fighterWin';
                                if (resultMain === 'paper' && resultFighter === 'sci') finalResult = 'fighterWin';
                                if (resultMain === 'sci' && resultFighter === 'rock') finalResult = 'fighterWin';

                                if (finalResult === 'tie') {
                                    return sent.edit({
                                        content: `Nobody won the challenge, it's a tie!`,
                                        embeds: [
                                            new EmbedBuilder()
                                                .setDescription('Choices chosen from the players:')
                                                .addFields(
                                                    {
                                                        name: `Main Fighter (${interaction.user.tag})`,
                                                        value: replaceValue[resultMain]
                                                    },
                                                    {
                                                        name: `Other Fighter (${interaction.guild.members.cache.get(this.fighter).user.tag || "Unknown#0000"})`,
                                                        value: replaceValue[resultFighter]
                                                    }
                                                )
                                                .setColor('Green')
                                        ]
                                    }).catch(() => { });
                                } else if (finalResult === 'mainWin') {
                                    return sent.edit({
                                        content: `🎉 ${interaction.user} has won the game, congratulations! 🎉`,
                                        embeds: [
                                            new EmbedBuilder()
                                                .setDescription('Choices chosen from the players:')
                                                .addFields(
                                                    {
                                                        name: `Main Fighter (${interaction.user.tag})`,
                                                        value: replaceValue[resultMain]
                                                    },
                                                    {
                                                        name: `Other Fighter (${interaction.guild.members.cache.get(this.fighter).user.tag || "Unknown#0000"})`,
                                                        value: replaceValue[resultFighter]
                                                    }
                                                )
                                                .setColor('Green')
                                        ]
                                    }).catch(() => { });
                                } else if (finalResult === 'fighterWin') {
                                    return sent.edit({
                                        content: `🎉 ${interaction.guild.members.cache.get(this.fighter)} has won the game, congratulations! 🎉`,
                                        embeds: [
                                            new EmbedBuilder()
                                                .setDescription('Choices chosen from the players:')
                                                .addFields(
                                                    {
                                                        name: `Main Fighter (${interaction.user.tag})`,
                                                        value: replaceValue[resultMain]
                                                    },
                                                    {
                                                        name: `Other Fighter (${interaction.guild.members.cache.get(this.fighter).user.tag || "Unknown#0000"})`,
                                                        value: replaceValue[resultFighter]
                                                    }
                                                )
                                                .setColor('Green')
                                        ]
                                    }).catch(() => { });
                                };
                            });
                        });
                    });


                };

                if (i.customId === "super_djs_deny_btn") {
                    i.update({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('RPS Challenge - Denied')
                                .setDescription(`Unfortunately, ${interaction.guild.members.cache.get(this.fighter) || "**Unknown#0000**"} has denied the challenge.`)
                                .setColor('Red')
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[0].components.map((btn) => btn.setDisabled(true))
                                )
                        ]
                    }).catch(() => { });

                    return collectorGameCheck.stop();
                };
            });

            collectorGameCheck.on('end', async () => {
                if (collectorGameCheck._endReason === "time") {
                    interaction.editReply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('RPS Challenge - No Response')
                                .setDescription(`Unfortunately, ${interaction.guild.members.cache.get(this.fighter) || "**Unknown#0000**"} didn't accepted or denied the challenge.`)
                                .setColor('Red')
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    actionRow[0].components.map((btn) => btn.setDisabled(true))
                                )
                        ]
                    }).catch(() => { });
                } else return;
            })
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    }
}