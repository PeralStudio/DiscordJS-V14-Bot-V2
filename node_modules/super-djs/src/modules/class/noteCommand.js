const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

const { EmbedBuilder } = require('discord.js');
const { noteCommandChoices } = require('../data.json');
const DB = require('../../schemas/noteCommand');

module.exports = class NoteCommand {
    constructor(type) {
        if (!type) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'type' is required to provide.`);

        if (typeof type !== "string") throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'type' is not a String.`);

        if (!noteCommandChoices.some((choice) => type.includes(choice))) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'type' is not 'add', 'remove', 'edit', or 'check'.`);

        this.type = type;
    };

    configure(options =
        {
            discordApi: {
                returnEphemeral: false
            },
            colors: {
                success: "Green",
                unsuccess: "Red",
                check: "Blue"
            },
            emojis: {
                success: ":white_check_mark:",
                unsuccess: ":x:"
            }
        }
    ) {
        this.options = options;
        return this;
    };

    async run(interaction, user, message) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        if (!user) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'user' is required to provide.`);

        try {
            if (this.type === "add") {
                if (!message) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'message' is required to provide for the type 'add'.`);

                DB.findOne({
                    user: user,
                    guild: interaction.guild.id,
                    author: interaction.user.id
                }, async (err, data) => {
                    if (err) throw err;

                    if (!data) {
                        data = new DB({
                            user: user,
                            guild: interaction.guild.id,
                            author: interaction.user.id,
                            content: message
                        });

                        data.save().catch(console.error);

                        return interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setDescription(`${this.options?.emojis?.success || ""} Successfully added a note to **${interaction.guild.members.cache.get(user).user.tag}**.`)
                                    .setColor(this.options?.colors?.success || "Green")
                            ],
                            ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                        })
                    } else return interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription(`${this.options?.emojis?.unsuccess || ""} You have already added a note to that user.`)
                                .setColor(this.options?.colors?.unsuccess || "Red")
                        ],
                        ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                    });

                });
            };

            if (this.type === "remove") {
                DB.findOne({
                    user: user,
                    guild: interaction.guild.id,
                    author: interaction.user.id
                }, async (err, data) => {
                    if (err) throw err;

                    if (data) {
                        await DB.deleteOne({
                            user: user,
                            guild: interaction.guild.id,
                            author: interaction.user.id
                        });

                        data.save().catch(console.error);

                        return interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setDescription(`${this.options?.emojis?.success || ""}Successfully deleted the note from **${interaction.guild.members.cache.get(user).user.tag}**.`)
                                    .setColor(this.options?.colors?.success || "Green")
                            ],
                            ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                        });
                    } else return interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription(`${this.options?.emojis?.unsuccess || ""} You didn\'t wrote a note to that user.`)
                                .setColor(this.options?.colors?.unsuccess || "Red")
                        ],
                        ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                    });
                });
            };

            if (this.type === "edit") {
                if (!message) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'message' is required to provide for the type 'edit'.`);

                DB.findOne({
                    user: user,
                    guild: interaction.guild.id,
                    author: interaction.user.id
                }, async (err, data) => {
                    if (err) throw err;

                    if (data) {
                        await DB.updateOne({
                            user: user,
                            guild: interaction.guild.id,
                            author: interaction.user.id
                        }, {
                            content: message,
                            edited: true
                        });

                        return interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setDescription(`${this.options?.emojis?.success || ""}Successfully updated the note for **${interaction.guild.members.cache.get(user).user.tag}**.`)
                                    .setColor(this.options?.colors?.success || "Green")
                            ],
                            ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                        });
                    } else return interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription(`${this.options?.emojis?.unsuccess || ""} You didn\'t wrote a note to that user.`)
                                .setColor(this.options?.colors?.unsuccess || "Red")
                        ],
                        ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                    });
                });
            };

            if (this.type === "check") {
                DB.findOne({
                    user: user,
                    guild: interaction.guild.id,
                    author: interaction.user.id
                }, async (err, data) => {
                    if (err) throw err;

                    if (data) {
                        return interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle(`Note for: ${interaction.guild.members.cache.get(user).user.tag} ${data.edited ? "(edited)" : " "}`)
                                    .setDescription(data.content.substr(0, 4096) || "`[!] DataBase is probably corrupted.`")
                                    .setColor(this.options.colors?.check || "Blue")
                            ],
                            ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                        });
                    } else return interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setDescription(`${this.options?.emojis?.unsuccess || ""} You didn\'t wrote a note to that user.`)
                                .setColor(this.options?.colors?.unsuccess || "Red")
                        ],
                        ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                    });
                });
            };
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    }
};