const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

try {
    require('ms');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] ms package is not installed, run in the terminal this command: npm i ms`);
};

const { ActionRowBuilder, ComponentType, EmbedBuilder } = require('discord.js');
const ms = require('ms');

module.exports = class ButtonsPaginator {
    constructor(embeds, buttons) {
        if (!embeds) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'embeds' is required to provide.`);

        if (!Array.isArray(embeds)) throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'embeds' is not an Array.`);

        if (embeds.length <= 1) throw new Error(`[${name}: PARAMETER_ERROR] You need to provide at least two embeds.`);

        if (!buttons) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'buttons' is required to provide.`);

        if (!Array.isArray(buttons)) throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'buttons' is not an Array.`);

        if (buttons.length <= 1) throw new Error(`[${name}: PARAMETER_ERROR] You need to provide at least two buttons.`);

        this.embeds = embeds;
        this.buttons = buttons;

        if (buttons[2]) {
            this.actionRow = new ActionRowBuilder()
                .addComponents(
                    buttons[0].setCustomId('super_djs_button_previous'),
                    buttons[1].setCustomId('super_djs_button_next'),
                    buttons[2].setCustomId('super_djs_button_end')
                )
        } else {
            this.actionRow = new ActionRowBuilder()
                .addComponents(
                    buttons[0].setCustomId('super_djs_button_previous'),
                    buttons[1].setCustomId('super_djs_button_next')
                )
        };
    };

    configure(options =
        {
            discordApi: {
                returnEphemeral: false,
                components: {
                    expirationTime: 600000
                }
            }
        }
    ) {
        this.options = options;
        return this;
    };

    setTimeoutEmbed(embed, options = {
        showComponents: false
    }) {
        this.endEmbed = embed;
        this.showComponents = options.showComponents;
        return this;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        try {
            await interaction.reply({
                embeds: [
                    this.embeds[0]
                ],
                components: [
                    this.actionRow
                ],
                ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
            });

            const collector = interaction.channel.createMessageComponentCollector({
                filter: i => i.user.id === interaction.user.id,
                type: ComponentType.Button,
                time: this.options?.discordApi?.components?.expirationTime
            });

            let current = 0;

            collector.on('collect', async (i) => {
                if (i.customId === "super_djs_button_previous") {
                    if (current === 0) current = this.embeds.length - 1;

                    else current--;

                    await i.update({
                        embeds: [
                            this.embeds[current]
                        ],
                        components:
                            [
                                this.actionRow
                            ]
                    }).catch(() => { });
                };

                if (i.customId === "super_djs_button_next") {
                    if (current === this.embeds.length - 1) current = 0;

                    else current++;

                    await i.update({
                        embeds: [
                            this.embeds[current]
                        ],
                        components: [
                            this.actionRow
                        ]
                    }).catch(() => { });
                };

                if (i.customId === "super_djs_button_end") {

                    await i.update({
                        embeds: [
                            this.embeds[current]
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    this.buttons.map((button) => button.setDisabled(true))
                                )
                        ]
                    }).catch(() => { });
                };
            });

            collector.on('end', async () => {
                if (collector._endReason === "time") {
                    if (this.showComponents === true) {
                        await interaction.editReply({
                            embeds: [
                                this.endEmbed || new EmbedBuilder()
                                    .setTitle('Timed out!')
                                    .setDescription(`Your menu has been expired in **${ms(this.options?.discordApi?.components?.expirationTime, { long: true })}**.`)
                                    .setFooter({
                                        text: `By: ${name} Development.`
                                    })
                                    .setColor('Red')
                            ],
                            components: [
                                new ActionRowBuilder()
                                    .addComponents(
                                        this.buttons.map((button) => button.setDisabled(true))
                                    )
                            ]
                        }).catch(() => { });
                    } else {
                        await interaction.editReply({
                            embeds: [
                                this.endEmbed || new EmbedBuilder()
                                    .setTitle('Timed out!')
                                    .setDescription(`Your menu has been expired in **${ms(this.options?.discordApi?.components?.expirationTime, { long: true })}**.`)
                                    .setFooter({
                                        text: `By: ${name} Development.`
                                    })
                                    .setColor('Red')
                            ],
                            components: []
                        }).catch(() => { });
                    };
                } else return;
            });
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};