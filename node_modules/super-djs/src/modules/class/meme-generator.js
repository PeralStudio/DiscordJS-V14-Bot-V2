const { name } = require('../../config/pkg.json');

try {
    require('discord.js');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] discord.js package is not installed, run in the terminal this command: npm i discord.js@latest`);
};

try {
    require('node-fetch');
} catch (err) {
    throw new Error(`[${name}: NODEJS_PACKAGE_ERROR] node-fetch package is not installed, run in the terminal this command: npm i node-fetch`);
};

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');
const fetch = require('node-fetch');

module.exports = class MemeGenerator {
    constructor(allowRegenerate = true) {
        this.allowRegenerate = allowRegenerate;
        return this;
    };

    configure(options =
        {
            discordApi: {
                returnEphemeral: false,
            },
            colors: {
                main: "Blue",
            }
        }
    ) {
        this.options = options;
        return this;
    };

    setMainButtons(buttons) {
        if (!Array.isArray(buttons)) throw new TypeError(`[${name}: MISSING_PARAMETER] The parameter 'buttons' is not an Array.`);
        if (buttons.length < 2) throw new Error(`[${name}: MISSING_PARAMETER] You need to provide at least two buttons.`);

        this.actionRow = new ActionRowBuilder()
            .addComponents(
                buttons[0].setCustomId('super_djs_button_regenerate_meme'),
                buttons[1].setCustomId('super_djs_button_stop_interaction_meme')
            );

        return this;
    };

    async run(interaction) {
        if (!interaction) throw new Error(`[${name}: MISSING_PARAMETER] The parameter 'interaction' is required to provide.`);

        // Start:
        try {
            const bodyFirst = await fetch('https://meme-api.herokuapp.com/gimme').then((res) => {
                if (res.status === 404) return;
                return res.json();
            });

            let actionRow = this.actionRow ? [
                this.actionRow
            ] : [
                new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('super_djs_button_regenerate_meme')
                            .setLabel('Regenerate')
                            .setDisabled(this.allowRegenerate ? false : true)
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId('super_djs_button_stop_interaction_meme')
                            .setLabel('End Interaction')
                            .setDisabled(this.allowRegenerate ? false : true)
                            .setStyle(ButtonStyle.Danger),
                    )
            ];

            if (this.allowRegenerate === true) {
                interaction.reply({
                    embeds: [
                        new EmbedBuilder()
                            .setAuthor({
                                name: `By: ${bodyFirst.author}`
                            })
                            .setTitle(bodyFirst.title)
                            .setURL(bodyFirst.postLink)
                            .setImage(bodyFirst.url)
                            .setFooter({
                                text: `${bodyFirst.ups}👍 || r/${bodyFirst.subreddit}`
                            })
                            .setColor(this.options?.colors?.main || "Blue")
                    ],
                    components: [
                        actionRow[0]
                    ],
                    ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                });

                const collector = interaction.channel.createMessageComponentCollector({
                    filter: i => i.user.id === interaction.user.id,
                    type: ComponentType.Button
                });

                collector.on('collect', async (i) => {
                    if (i.customId === 'super_djs_button_regenerate_meme') {
                        const bodySecond = await fetch('https://meme-api.herokuapp.com/gimme').then((res) => {
                            if (res.status === 404) return;
                            return res.json();
                        });

                        i.update({
                            embeds: [
                                new EmbedBuilder()
                                    .setAuthor({
                                        name: `By: ${bodySecond.author}`
                                    })
                                    .setTitle(bodySecond.title)
                                    .setURL(bodySecond.postLink)
                                    .setImage(bodySecond.url)
                                    .setFooter({
                                        text: `${bodySecond.ups}👍 || r/${bodySecond.subreddit}`
                                    })
                                    .setColor(this.options?.colors?.main || "Blue")
                            ],
                            components: [
                                actionRow[0]
                            ]
                        }).catch(() => { });
                    };

                    if (i.customId === 'super_djs_button_stop_interaction_meme') {
                        await i.update({
                            components: [
                                new ActionRowBuilder()
                                    .addComponents(
                                        actionRow[0].components.map((btn) => btn.setDisabled(true))
                                    )
                            ]
                        }).catch(() => { });

                        return collector.stop();
                    };
                });
            } else {
                interaction.reply({
                    embeds: [
                        new EmbedBuilder()
                            .setAuthor({
                                name: `By: ${bodyFirst.author}`
                            })
                            .setTitle(bodyFirst.title)
                            .setURL(bodyFirst.postLink)
                            .setImage(bodyFirst.url)
                            .setFooter({
                                text: `${bodyFirst.ups}👍 || r/${bodyFirst.subreddit}`
                            })
                            .setColor(this.options?.colors?.main || "Blue")
                    ],
                    ephemeral: this.options?.discordApi?.returnEphemeral ? true : false
                });
            };
        } catch (err) {
            throw new Error(`[${name}: ERROR] An error has been occured.\n> ` + err);
        };
    };
};
