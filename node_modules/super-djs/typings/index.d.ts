import { Interaction, Message, GuildMember, EmbedBuilder, ButtonBuilder, Client } from 'discord.js';

declare module "super-djs";

interface EightBallConfig {
    discordApi: {
        returnEphemeral: boolean
    }
}

interface ButtonsPaginatorConfig {
    discordApi: {
        returnEphemeral: boolean,
        components: {
            expirationTime: number
        }
    }
}

interface CalculatorConfig {
    name: string,
    discordApi: {
        returnEphemeral: boolean,
    },
    colors: {
        main: string,
        result: string
    }
}

interface GhostPingDetectorConfig {
    discordApi: {
        channelToLog: string
    }
}

interface MemeGeneratorConfig {
    discordApi: {
        returnEphemeral: boolean,
    },
    colors: {
        main: string,
    }
}

interface MenuPaginatorConfig {
    discordApi: {
        returnEphemeral: boolean,
        components: {
            placeHolder: string,
            expirationTime: number
        }
    }
}

interface NoteCommandConfig {
    discordApi: {
        returnEphemeral: boolean
    },
    colors: {
        success: string,
        unsuccess: string,
        check: string
    },
    emojis: {
        success: string,
        unsuccess: string
    }
}

interface SearchNpmConfig {
    discordApi: {
        returnEphemeral: false
    }
}

// Classes:
export class EightBall {
    constructor(question: string, responses: Array<string>);

    public configure(options: EightBallConfig): void;

    public setMainEmbed(embed: EmbedBuilder): void;

    public run(interaction: Interaction): Promise<void>;
}

export class ButtonsPaginator {
    constructor(embeds: Array<EmbedBuilder>, buttons: Array<ButtonBuilder>);

    public configure(options?: ButtonsPaginatorConfig): void;

    public setTimeoutEmbed(embed: EmbedBuilder, options: { showComponents: boolean }): void;

    public run(interaction: Interaction): Promise<void>;
}

export class Calculator {
    constructor();

    public configure(options?: CalculatorConfig): void;

    public run(interaction: Interaction): Promise<void>;
}

export class GhostPingDetector {
    constructor();

    public configure(options?: GhostPingDetectorConfig): void;

    public setMainEmbed(embed: EmbedBuilder): void;

    public run(message: Message): Promise<void>;
}

export class MemeGenerator {
    constructor(allowRegenerate: boolean);

    public configure(options?: MemeGeneratorConfig): void;

    public run(interaction: Interaction): Promise<void>;
}

export class MenuPaginator {
    constructor(embeds: Array<EmbedBuilder>);

    public configure(options?: MenuPaginatorConfig): void;

    public setTimeoutEmbed(embed: EmbedBuilder, options: { showComponents: boolean }): void;

    public run(interaction: Interaction): Promise<void>;
}

export class NoteCommand {
    constructor(type: string);

    configure(options?: NoteCommandConfig): void;

    public run(interaction: Interaction, user: GuildMember, message?: string): Promise<void>;
}

export class SearchNpm {
    constructor(pkg: string);

    public configure(options?: SearchNpmConfig): void;

    public setMainEmbed(embed: EmbedBuilder): void;

    public run(interaction: Interaction): Promise<void>;
}

export class TextFileGenerator {
    constructor(content: string, fileName?: string, fileLanguage?: string);
}

export class RPS {
    constructor(client: Client, fighter: string);

    public run(interaction: Interaction): Promise<void>;
}

// Functions:
export function RandomString(length: number): string;

export function Wait(time: number): Promise<void>;

export function isDiscordInvite(message: string): boolean;

export function connectMongoDB(URI: string, logMessageWhenConnected?: boolean, logMessage?: string): void;

export function colourText(text: string, color?: string, style?: string): string;

// Constants:
export const packageVersion: string;