// src/parse.ts
import { URL } from "url";

// src/util.ts
function decode(str) {
  return decodeURIComponent(str).replace(/\+/g, " ");
}
function encode(str) {
  return escape(str.replace(/ /g, "+"));
}

// src/spotify-uri.ts
var SpotifyUri = class {
  constructor(uri) {
    this.uri = uri;
  }
  static is(v) {
    return Boolean(typeof v === "object" && typeof v.uri === "string");
  }
  toEmbedURL() {
    return `https://embed.spotify.com/?uri=${this.toURI()}`;
  }
  toOpenURL() {
    return `https://open.spotify.com${this.toURL()}`;
  }
  toPlayURL() {
    return `https://play.spotify.com${this.toURL()}`;
  }
};

// src/local.ts
var Local = class extends SpotifyUri {
  constructor(uri, artist, album, track, seconds) {
    super(uri);
    this.type = "local";
    this.artist = artist;
    this.album = album;
    this.track = track;
    this.seconds = seconds;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "local");
  }
  toURI() {
    return `spotify:local:${encode(this.artist)}:${encode(this.album)}:${encode(this.track)}:${this.seconds}`;
  }
  toURL() {
    return `/local/${encode(this.artist)}/${encode(this.album)}/${encode(this.track)}/${this.seconds}`;
  }
};

// src/search.ts
var Search = class extends SpotifyUri {
  constructor(uri, query) {
    super(uri);
    this.type = "search";
    this.query = query;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "search");
  }
  toURI() {
    return `spotify:search:${encode(this.query)}`;
  }
  toURL() {
    return `/search/${encode(this.query)}`;
  }
};

// src/playlist.ts
var Playlist = class extends SpotifyUri {
  constructor(uri, id, user) {
    super(uri);
    this.type = "playlist";
    this.id = id;
    if (typeof user === "string") {
      this.user = user;
    }
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "playlist");
  }
  toURI() {
    if (this.user !== void 0) {
      if (this.id === "starred") {
        return `spotify:user:${encode(this.user)}:${encode(this.id)}`;
      }
      return `spotify:user:${encode(this.user)}:playlist:${encode(this.id)}`;
    }
    return `spotify:playlist:${encode(this.id)}`;
  }
  toURL() {
    if (this.user !== void 0) {
      if (this.id === "starred") {
        return `/user/${encode(this.user)}/${encode(this.id)}`;
      }
      return `/user/${encode(this.user)}/playlist/${encode(this.id)}`;
    }
    return `/playlist/${encode(this.id)}`;
  }
};

// src/artist.ts
var Artist = class extends SpotifyUri {
  constructor(uri, id) {
    super(uri);
    this.type = "artist";
    this.id = id;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "artist");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.id)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.id)}`;
  }
};

// src/album.ts
var Album = class extends SpotifyUri {
  constructor(uri, id) {
    super(uri);
    this.type = "album";
    this.id = id;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "album");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.id)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.id)}`;
  }
};

// src/track.ts
var Track = class extends SpotifyUri {
  constructor(uri, id) {
    super(uri);
    this.type = "track";
    this.id = id;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "track");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.id)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.id)}`;
  }
};

// src/episode.ts
var Episode = class extends SpotifyUri {
  constructor(uri, id) {
    super(uri);
    this.type = "episode";
    this.id = id;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "episode");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.id)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.id)}`;
  }
};

// src/show.ts
var Show = class extends SpotifyUri {
  constructor(uri, id) {
    super(uri);
    this.type = "show";
    this.id = id;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "show");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.id)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.id)}`;
  }
};

// src/user.ts
var User = class extends SpotifyUri {
  constructor(uri, user) {
    super(uri);
    this.type = "user";
    this.user = user;
  }
  static is(v) {
    return Boolean(typeof v === "object" && v.type === "user");
  }
  toURI() {
    return `spotify:${this.type}:${encode(this.user)}`;
  }
  toURL() {
    return `/${this.type}/${encode(this.user)}`;
  }
};

// src/parse.ts
function parse(input) {
  const uri = SpotifyUri.is(input) ? input.uri : input;
  const { protocol, hostname, pathname = "/", searchParams } = new URL(uri);
  if (hostname === "embed.spotify.com") {
    const parsedQs = Object.fromEntries(searchParams);
    if (typeof parsedQs.uri !== "string") {
      throw new Error("fo");
    }
    return parse(parsedQs.uri);
  }
  if (protocol === "spotify:") {
    const parts2 = uri.split(":");
    return parseParts(uri, parts2);
  }
  if (pathname === null) {
    throw new TypeError("No pathname");
  }
  const parts = pathname.split("/");
  return parseParts(uri, parts);
}
function parseParts(uri, parts) {
  const len = parts.length;
  if (parts[1] === "embed") {
    parts = parts.slice(1);
  }
  if (parts[1] === "search") {
    return new Search(uri, decode(parts.slice(2).join(":")));
  }
  if (len >= 3 && parts[1] === "local") {
    return new Local(
      uri,
      decode(parts[2]),
      decode(parts[3]),
      decode(parts[4]),
      +parts[5]
    );
  }
  if (len === 3 && parts[1] === "playlist") {
    return new Playlist(uri, decode(parts[2]));
  }
  if (len === 3 && parts[1] === "user") {
    return new User(uri, decode(parts[2]));
  }
  if (len >= 5) {
    return new Playlist(uri, decode(parts[4]), decode(parts[2]));
  }
  if (len >= 4 && parts[3] === "starred") {
    return new Playlist(uri, "starred", decode(parts[2]));
  }
  if (parts[1] === "artist") {
    return new Artist(uri, parts[2]);
  }
  if (parts[1] === "album") {
    return new Album(uri, parts[2]);
  }
  if (parts[1] === "track") {
    return new Track(uri, parts[2]);
  }
  if (parts[1] === "episode") {
    return new Episode(uri, parts[2]);
  }
  if (parts[1] === "show") {
    return new Show(uri, parts[2]);
  }
  if (parts[1] === "playlist") {
    return new Playlist(uri, parts[2]);
  }
  throw new TypeError(`Could not determine type for: ${uri}`);
}

// src/index.ts
function formatURI(input) {
  const uri = typeof input === "string" ? parse(input) : input;
  return uri.toURI();
}
function formatEmbedURL(input) {
  const uri = typeof input === "string" ? parse(input) : input;
  return uri.toEmbedURL();
}
function formatOpenURL(input) {
  const uri = typeof input === "string" ? parse(input) : input;
  return uri.toOpenURL();
}
function formatPlayURL(input) {
  const uri = typeof input === "string" ? parse(input) : input;
  return uri.toPlayURL();
}
export {
  Album,
  Artist,
  Episode,
  Local,
  Playlist,
  Search,
  Track,
  User,
  formatEmbedURL,
  formatOpenURL,
  formatPlayURL,
  formatURI,
  parse
};
